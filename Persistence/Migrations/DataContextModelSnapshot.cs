// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Izgubljeno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ImaCip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImeKontakta")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImeZivotinje")
                        .HasColumnType("TEXT");

                    b.Property<string>("LokacijaGdeJeIzgubljen")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Starost")
                        .HasColumnType("TEXT");

                    b.Property<string>("TekstOglasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonKontakta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vrsta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IzgubljeneZivotinje");
                });

            modelBuilder.Entity("Domain.Nadjeno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ImaCip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImeKontakta")
                        .HasColumnType("TEXT");

                    b.Property<string>("JelSklonjen")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProverenCip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("TekstOglasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonKontakta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vrsta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NadjeneZivotinje");
                });

            modelBuilder.Entity("Domain.Slika", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Put")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SlikeZivotinja");
                });

            modelBuilder.Entity("Domain.SlikeIzgubljen", b =>
                {
                    b.Property<Guid>("SlikaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OglasId")
                        .HasColumnType("TEXT");

                    b.HasKey("SlikaId", "OglasId");

                    b.HasIndex("OglasId");

                    b.ToTable("SlikeIzgubljen");
                });

            modelBuilder.Entity("Domain.SlikeNadjen", b =>
                {
                    b.Property<Guid>("SlikaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OglasId")
                        .HasColumnType("TEXT");

                    b.HasKey("SlikaId", "OglasId");

                    b.HasIndex("OglasId");

                    b.ToTable("SlikeNadjen");
                });

            modelBuilder.Entity("Domain.SlikeUdomljen", b =>
                {
                    b.Property<Guid>("SlikaId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OglasId")
                        .HasColumnType("TEXT");

                    b.HasKey("SlikaId", "OglasId");

                    b.HasIndex("OglasId");

                    b.ToTable("SlikeUdomljen");
                });

            modelBuilder.Entity("Domain.Udomljavanje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("GdeSeZahtevaDaZivi")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ImaCip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImeKontakta")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImeZivotinje")
                        .HasColumnType("TEXT");

                    b.Property<bool>("JelImaPapire")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("JelVakcinisan")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ObavezanUgovor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Starost")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sterilisan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TekstOglasa")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonKontakta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vrsta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UdomljeneZivotinje");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.SlikeIzgubljen", b =>
                {
                    b.HasOne("Domain.Izgubljeno", "IzgubljenObj")
                        .WithMany("SlikeIzgubljen")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Slika", "SlikaObj")
                        .WithMany("SlikeIzgubljen")
                        .HasForeignKey("SlikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IzgubljenObj");

                    b.Navigation("SlikaObj");
                });

            modelBuilder.Entity("Domain.SlikeNadjen", b =>
                {
                    b.HasOne("Domain.Nadjeno", "NadjenObj")
                        .WithMany("SlikeNadjen")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Slika", "SlikaObj")
                        .WithMany("SlikeNadjen")
                        .HasForeignKey("SlikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NadjenObj");

                    b.Navigation("SlikaObj");
                });

            modelBuilder.Entity("Domain.SlikeUdomljen", b =>
                {
                    b.HasOne("Domain.Udomljavanje", "UdomljenObj")
                        .WithMany("SlikeUdomljen")
                        .HasForeignKey("OglasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Slika", "SlikaObj")
                        .WithMany("SlikeUdomljen")
                        .HasForeignKey("SlikaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlikaObj");

                    b.Navigation("UdomljenObj");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Izgubljeno", b =>
                {
                    b.Navigation("SlikeIzgubljen");
                });

            modelBuilder.Entity("Domain.Nadjeno", b =>
                {
                    b.Navigation("SlikeNadjen");
                });

            modelBuilder.Entity("Domain.Slika", b =>
                {
                    b.Navigation("SlikeIzgubljen");

                    b.Navigation("SlikeNadjen");

                    b.Navigation("SlikeUdomljen");
                });

            modelBuilder.Entity("Domain.Udomljavanje", b =>
                {
                    b.Navigation("SlikeUdomljen");
                });
#pragma warning restore 612, 618
        }
    }
}
